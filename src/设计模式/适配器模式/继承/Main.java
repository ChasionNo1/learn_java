package 设计模式.适配器模式.继承;

/**
 * @ClassName Main
 * @Description TODO
 * @Author chasion
 * @Date 2022/5/6 15:24
 *
 *
 * 着用用于填补 现有程序 和 所需程序 之间差异的设计模式就是适配器模式，也被成为 wrapper 模式
 * 适配器模式有两种：
 *  1、类适配器模式（使用继承的适配器）
 *  2、对象适配器模式（使用委托的适配器）
 *
 *  适配器中的角色
 *  target(对象）：该角色负责定义所需的方法。以本章开头的例子来说，即让笔记本电脑正常工作所需的直流12伏特电源。
 *                  在示例程序中，由Print接口（使用继承时)和Print类(使用委托时)扮演此角色。
 *
 *  client(请求者)：该角色负责使用Target角色所定义的方法进行具体处理。以本章开头的例子来说，即直流12
 *                  伏特电源所驱动的笔记本电脑。在示例程序中，由Main类扮演此角色。
 *
 *  Adaptee(被适配）：注意不是Adapt-er(适配)角色，而是Adapt-ee（被适配)角色。Adaptee是一个持有既定方法的角色。
 *                  以本章开头的例子来说，即交流100伏特电源。在示例程序中，由Banner类扮演此角色。
 *                  如果 Adaptee角色中的方法与Target角色的方法相同(也就是说家庭使用的电压就是12伏特直流电压)，就不需要接下来的Adapter角色了。
 *
 *  Adapter(适配）：Adapter模式的主人公。使用Adaptee 角色的方法来满足Target角色的需求，这是 Adapter模式的目的，也是Adapter角色的作用。
 *                   以本章开头的例子来说，Adapter角色就是将交流100伏特电压转换为直流12伏特电压的适配器。在示例程序中，由PrintBanner类扮演这个角色。
 *                  在类适配器模式中,Adapter角色通过继承来使用Adapter角色通过委托来使用Adaptee角色。
 *
 *
 *  什么时候使用适配器模式呢？
 *  一定会有读者认为“如果某个方法就是我们所需要的方法,
 * 那么直接在程序中使用不就可以了吗?为什么还要考虑使用Adapter模式呢?”那么，究竟应当在什么时候使用Adapter模式呢?
 * 很多时候，我们并非从零开始编程，经常会用到现有的类。特别是当现有的类已经被充分测试过了，
 * Bug很少，而且已经被用于其他软件之中时，我们更愿意将这些类作为组件重复利用。
 * Adapter模式会对现有的类进行适配，生成新的类。通过该模式可以很方便地创建我们需要的方法群。
 * 当出现Bug时，由于我们很明确地知道Bug 不在现有的类(Adaptee角色)中，所以只需调查扮演Adapter角色的类即可。
 * 这样一来，代码问题的排查就会变得非常简单。
 *
 * 对现有的类做适配
 */
public class Main {
    public static void main(String[] args) {
        Print p = new PrintBanner("hello");
        p.printWeak();
        p.printStrong();
    }
}
